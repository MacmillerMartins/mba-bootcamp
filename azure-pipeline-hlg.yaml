resources:
  repositories:
  - repository: mba-bootcamp
    type: github
    endpoint: 'mba-bootcamp'
    name: MacmillerMartins/mba-bootcamp

variables:
# Vesion = Major + Minor + BuildId
# Verison = $(versionNumberMajor).$(versionNumberMinor).$(Build.BuildId)
# Exemplo: 
# Version= 1.1.222
- name: versionNumberMajor
  value: '1'
- name: versionNumberMinor
  value: '1'
# Docker Hub
- name: repoDockerHubName
  value: 'macmiller'
- name: dockerHubServiceConnect
  value: 'sc-dockerhub'
# Agent Azure DevOps
- name: imageAgentAz
  value: 'ubuntu-latest'
# Aks 
- name: azureResourceGroup
  value: 'rg-bootcamp'
- name: kubernetesCluster
  value: 'aks-bootcamp'
- name: aksServiceConnect
  value: 'sc-aks'
# SonarCloud
- name: sonarCloudServiceConnect
  value: 'sc-sonarcloud'
- name: sonarCloudProjectKey
  value: 'MacmillerMartins_mba-bootcamp'

stages:

- stage: Tests
  displayName: Tests
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - job: Tests
    displayName: Tests
    pool:
      vmImage: '$(imageAgentAz)'
    steps:
    - task: SonarCloudPrepare@1
      displayName: SonarCloud Prepare
      inputs:
        SonarCloud: '$(sonarCloudServiceConnect)'
        organization: '$(system.teamProject)'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(sonarCloudProjectKey)'
        cliProjectName: '$(system.teamProject)'
        cliSources: '.'
    - task: GoTool@0
      displayName: Go Install
      inputs:
        version: '1.18'
    - task: Go@0
      displayName: Go Build
      inputs:
        command: build
    - task: SonarCloudAnalyze@1
      displayName: SonarCloud Analyze
    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'
    - task: sonarcloud-buildbreaker@2
      inputs:
        SonarCloud: 'sc-sonarcloud'
        organization: 'mba-bootcamp'
    - task: ArchiveFiles@2
      displayName: Archive files
      inputs:
        rootFolderOrFile: '$(Build.Repository.LocalPath)'
        includeRootFolder: False
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      condition: succeededOrFailed()
    - task: SonarCloudPublish@1
      displayName: SonarCloud Publish
      inputs:
        pollingTimeoutSec: '300'

- stage: BuildandPublish
  displayName: Build and Publish
  dependsOn: Tests
  jobs:
  - job: BuildandPublish
    displayName: Build and Publish
    pool:
      vmImage: '$(imageAgentAz)'
    steps:
    - task: Docker@2
      displayName: Docker Build
      inputs:
        containerRegistry: '$(dockerHubServiceConnect)'
        repository: '$(repoDockerHubName)/$(system.teamProject)-hlg'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(versionNumberMajor).$(versionNumberMinor).$(Build.BuildId)
          latest
    - task: Docker@2
      displayName: Docker Publish
      inputs:
        containerRegistry: '$(dockerHubServiceConnect)'
        repository: '$(repoDockerHubName)/$(system.teamProject)-hlg'
        command: 'push'
        tags: |
          $(versionNumberMajor).$(versionNumberMinor).$(Build.BuildId)
          latest

- stage: Deploy
  displayName: Deploy
  dependsOn: BuildandPublish
  jobs:
  - job: HelmCheck
    displayName: Helm Check
    pool:
      vmImage: '$(imageAgentAz)'
    steps:
    - task: Bash@3
      displayName: Helm lint
      inputs:
        targetType: 'inline'
        script: |
          helm lint helm/hlg
        failOnStderr: true
    - task: CopyFiles@2
      displayName: Copy Helm Files
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        Contents: |
          helm/**
        TargetFolder: '$(Build.ArtifactStagingDirectory)/'
        OverWrite: true
    - task: PublishBuildArtifacts@1
      displayName: Build and Plublish Artifacts Helm
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/helm/hlg'
        ArtifactName: 'helm'
        publishLocation: 'Container'
  - job: DeploytoAks
    displayName: Deploy to Aks
    dependsOn: HelmCheck
    pool:
      vmImage: '$(imageAgentAz)'
    steps:
    - task: DownloadBuildArtifacts@1
      displayName: Download Build Artifacts
      inputs:
        buildType: 'current'
        buildVersionToDownload: 'latest'
        downloadType: 'single'
        artifactName: 'helm'
        downloadPath: '$(Build.ArtifactStagingDirectory)'
    - task: HelmDeploy@0
      displayName: Helm Deploy
      inputs:
        connectionType: Kubernetes Service Connection
        kubernetesServiceEndpoint: '$(aksServiceConnect)'
        azureResourceGroup: '$(azureResourceGroup)'
        kubernetesCluster: '$(kubernetesCluster)'
        releaseName: '$(system.teamProject)-hlg'
        command: 'upgrade'
        chartType: 'FilePath'
        chartPath: '$(Build.ArtifactStagingDirectory)/helm'
        recreate: true
        force: true
        overrideValues: |
          image.repository=$(repoDockerHubName)/$(system.teamProject)-hlg
          image.tag=$(versionNumberMajor).$(versionNumberMinor).$(Build.BuildId)
        arguments: '--debug --timeout 300s --history-max 10'