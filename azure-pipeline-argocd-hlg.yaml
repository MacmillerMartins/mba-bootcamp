resources:
  repositories:
  - repository: mba-bootcamp
    type: github
    endpoint: 'mba-bootcamp'
    name: MacmillerMartins/mba-bootcamp

variables:
# Vesion = Major + Minor + BuildId
# Verison = $(versionNumberMajor).$(versionNumberMinor).$(Build.BuildId)
# Exemplo: 
# Version= 1.1.222
- name: versionNumberMajor
  value: '1'
- name: versionNumberMinor
  value: '1'
# Docker Hub
- name: repoDockerHubName
  value: 'macmiller'
- name: dockerHubServiceConnect
  value: 'sc-dockerhub'
# Agent Azure DevOps
- name: imageAgentAz
  value: 'ubuntu-latest'
# Aks 
- name: azureResourceGroup
  value: 'rg-bootcamp'
- name: kubernetesCluster
  value: 'aks-bootcamp'
- name: aksServiceConnect
  value: 'sc-aks'
# SonarCloud
- name: sonarCloudServiceConnect
  value: 'sc-sonarcloud'
- name: sonarCloudProjectKey
  value: 'MacmillerMartins_mba-bootcamp'
# GitHub
- name: githubRepo
  value: https://github.com/MacmillerMartins/mba-bootcamp.git

stages:
- stage: Deploy
  displayName: Deploy
  jobs:
  - job: DeploytoAks
    displayName: Deploy to Aks
#    dependsOn: HelmCheck
    pool:
      vmImage: '$(imageAgentAz)'
    steps:
    - task: Bash@3
      displayName: Install CLI Argo CD
      inputs:
        targetType: 'inline'
        script: |
          wget https://github.com/argoproj/argo-cd/releases/download/v2.3.3/argocd-linux-amd64 -O argocd-linux-amd64
          mv argocd-linux-amd64 argocd
          chmod +x argocd
    - task: Bash@3
      displayName: Login Argo CD
      inputs:
        targetType: 'inline'
        script: |
          az login -u $(azLogin) -p $(azPassword)
          az aks get-credentials --resource-group $(azureResourceGroup) --name $(kubernetesCluster)
          kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d > argocdAdminPassword
          kubectl get service argocd-server -n argocd | awk '{print$4}' | sed -n '2p' > argocdServer
          ./argocd login `cat argocdServer`:80 --insecure --username admin --password `cat argocdAdminPassword`
    - task: Bash@3
      displayName: Create Project Argo CD
      inputs:
        targetType: 'inline'
        script: |
          ./argocd proj create $(system.teamProject)-hlg --dest *,* --src * --allow-cluster-resource */*
    - task: Bash@3
      displayName: Create App Argo CD
      inputs:
        targetType: 'inline'
        script: |
          ./argocd app create $(system.teamProject)-hlg --project $(system.teamProject)-hlg --sync-policy auto --auto-prune --self-heal --sync-option CreateNamespace=true --repo $(githubRepo) --revision HEAD --path helm/hlg --dest-server https://kubernetes.default.svc --dest-namespace $(system.teamProject)-hlg --values values.yaml
