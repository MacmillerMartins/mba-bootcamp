resources:
  repositories:
  - repository: mba-bootcamp
    type: github
    endpoint: 'mba-bootcamp'
    name: MacmillerMartins/mba-bootcamp

variables:
# Vesion = Major + Minor + BuildId
# Verison = $(versionNumberMajor).$(versionNumberMinor).$(Build.BuildId)
# Exemplo: 
# Version= 1.1.222
- name: versionNumberMajor
  value: '1'
- name: versionNumberMinor
  value: '1'
# Docker Hub
- name: repoDockerHubName
  value: 'macmiller'
- name: dockerHubServiceConnect
  value: 'sc-dockerhub'
# Agent Azure DevOps
- name: imageAgentAz
  value: 'ubuntu-latest'
# Aks 
- name: azureResourceGroup
  value: 'rg-bootcamp'
- name: kubernetesCluster
  value: 'aks-bootcamp'
- name: aksServiceConnect
  value: 'sc-aks'
# GitHub
- name: githubRepo
  value: 'https://github.com/MacmillerMartins/mba-bootcamp.git'

stages:

- stage: TagandPublish
  displayName: Tag and Publish
  jobs:
  - job: BuildandPublish
    displayName: Build and Publish
    pool:
      vmImage: '$(imageAgentAz)'
    steps:
    - task: CmdLine@2
      displayName: Tagging
      inputs:
        script: |
          sudo docker pull '$(repoDockerHubName)/$(system.teamProject)-hlg:latest'
          sudo docker tag '$(repoDockerHubName)/$(system.teamProject)-hlg:latest' '$(repoDockerHubName)/$(system.teamProject)-prd:$(versionNumberMajor).$(versionNumberMinor).$(Build.BuildId)'
          sudo docker tag '$(repoDockerHubName)/$(system.teamProject)-hlg:latest' '$(repoDockerHubName)/$(system.teamProject)-prd:latest'
    - task: Docker@2
      displayName: Docker Publish
      inputs:
        containerRegistry: '$(dockerHubServiceConnect)'
        repository: '$(repoDockerHubName)/$(system.teamProject)-prd'
        command: 'push'
        tags: |
          $(versionNumberMajor).$(versionNumberMinor).$(Build.BuildId)
          latest

- stage: Deploy
  displayName: Deploy
  dependsOn: TagandPublish
  jobs:
  - job: HelmCheck
    displayName: Helm Check
    pool:
      vmImage: '$(imageAgentAz)'
    steps:
    - task: Bash@3
      displayName: Helm lint
      inputs:
        targetType: 'inline'
        script: |
          helm lint helm/prd
        failOnStderr: true
    - task: CopyFiles@2
      displayName: Copy Helm Files
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        Contents: |
          helm/prd/**
        TargetFolder: '$(Build.ArtifactStagingDirectory)/'
        OverWrite: true
    - task: PublishBuildArtifacts@1
      displayName: Build and Plublish Artifacts Helm
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/helm/prd'
        ArtifactName: 'helm'
        publishLocation: 'Container'

  - job: DeploytoAks
    displayName: Deploy to Aks
    dependsOn: HelmCheck
    pool:
      vmImage: '$(imageAgentAz)'
    steps:
    - task: Bash@3
      displayName: Install CLI Argo CD
      inputs:
        targetType: 'inline'
        script: |
          wget https://github.com/argoproj/argo-cd/releases/download/v2.3.3/argocd-linux-amd64 -O argocd-linux-amd64
          mv argocd-linux-amd64 argocd
          chmod +x argocd
    - task: Bash@3
      displayName: Login Argo CD
      inputs:
        targetType: 'inline'
        script: |
          az login -u $(azLogin) -p $(azPassword)
          az aks get-credentials --resource-group $(azureResourceGroup) --name $(kubernetesCluster)
          kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d > argocdAdminPassword
          kubectl get service argocd-server -n argocd | awk '{print$4}' | sed -n '2p' > argocdServer
          ./argocd login `cat argocdServer`:80 --insecure --username admin --password `cat argocdAdminPassword`
    - task: Bash@3
      displayName: Create Project Argo CD
      inputs:
        targetType: 'inline'
        script: |
          createProjectArgocd=`./argocd proj create $(system.teamProject)-prd --dest '*,*' --src '*' --allow-cluster-resource '*/*'`
          $createProjectArgocd > /dev/null 2>&1; if [ $? -eq 0 ]; then sleep 5 && echo "Projeto criado"; else echo "Projeto jÃ¡ Existe"; fi;
    - task: Bash@3
      displayName: Create App Argo CD
      inputs:
        targetType: 'inline'
        script: |
          createAppArgocd=`./argocd app create $(system.teamProject)-prd --project $(system.teamProject)-prd --sync-policy auto --auto-prune --self-heal --sync-option CreateNamespace=true --repo $(githubRepo) --revision HEAD --path helm/prd --dest-server https://kubernetes.default.svc --dest-namespace $(system.teamProject)-prd --values values.yaml`
          $syncAppArgocd=`./argocd app sync $(system.teamProject)-prd --force --replace`
          $createAppArgocd > /dev/null 2>&1; if [ $? -eq 0 ]; then sleep 5 && echo "App criado"; else $syncAppArgocd; fi;